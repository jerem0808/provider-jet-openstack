/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubnetpoolV2Observation struct {
	AllTags []*string `json:"allTags,omitempty" tf:"all_tags,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RevisionNumber *float64 `json:"revisionNumber,omitempty" tf:"revision_number,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`
}

type SubnetpoolV2Parameters struct {

	// +kubebuilder:validation:Optional
	AddressScopeID *string `json:"addressScopeId,omitempty" tf:"address_scope_id,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultPrefixlen *float64 `json:"defaultPrefixlen,omitempty" tf:"default_prefixlen,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultQuota *float64 `json:"defaultQuota,omitempty" tf:"default_quota,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// +kubebuilder:validation:Optional
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// +kubebuilder:validation:Optional
	MaxPrefixlen *float64 `json:"maxPrefixlen,omitempty" tf:"max_prefixlen,omitempty"`

	// +kubebuilder:validation:Optional
	MinPrefixlen *float64 `json:"minPrefixlen,omitempty" tf:"min_prefixlen,omitempty"`

	// +kubebuilder:validation:Required
	Prefixes []*string `json:"prefixes" tf:"prefixes,omitempty"`

	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Shared *bool `json:"shared,omitempty" tf:"shared,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// SubnetpoolV2Spec defines the desired state of SubnetpoolV2
type SubnetpoolV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubnetpoolV2Parameters `json:"forProvider"`
}

// SubnetpoolV2Status defines the observed state of SubnetpoolV2.
type SubnetpoolV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubnetpoolV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetpoolV2 is the Schema for the SubnetpoolV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type SubnetpoolV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubnetpoolV2Spec   `json:"spec"`
	Status            SubnetpoolV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetpoolV2List contains a list of SubnetpoolV2s
type SubnetpoolV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubnetpoolV2 `json:"items"`
}

// Repository type metadata.
var (
	SubnetpoolV2_Kind             = "SubnetpoolV2"
	SubnetpoolV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubnetpoolV2_Kind}.String()
	SubnetpoolV2_KindAPIVersion   = SubnetpoolV2_Kind + "." + CRDGroupVersion.String()
	SubnetpoolV2_GroupVersionKind = CRDGroupVersion.WithKind(SubnetpoolV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SubnetpoolV2{}, &SubnetpoolV2List{})
}
