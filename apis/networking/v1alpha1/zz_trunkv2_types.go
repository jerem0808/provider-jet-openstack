/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubPortObservation struct {
}

type SubPortParameters struct {

	// +kubebuilder:validation:Required
	PortID *string `json:"portId" tf:"port_id,omitempty"`

	// +kubebuilder:validation:Required
	SegmentationID *float64 `json:"segmentationId" tf:"segmentation_id,omitempty"`

	// +kubebuilder:validation:Required
	SegmentationType *string `json:"segmentationType" tf:"segmentation_type,omitempty"`
}

type TrunkV2Observation struct {
	AllTags []*string `json:"allTags,omitempty" tf:"all_tags,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TrunkV2Parameters struct {

	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	PortID *string `json:"portId" tf:"port_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SubPort []SubPortParameters `json:"subPort,omitempty" tf:"sub_port,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// TrunkV2Spec defines the desired state of TrunkV2
type TrunkV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrunkV2Parameters `json:"forProvider"`
}

// TrunkV2Status defines the observed state of TrunkV2.
type TrunkV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrunkV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TrunkV2 is the Schema for the TrunkV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type TrunkV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrunkV2Spec   `json:"spec"`
	Status            TrunkV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrunkV2List contains a list of TrunkV2s
type TrunkV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrunkV2 `json:"items"`
}

// Repository type metadata.
var (
	TrunkV2_Kind             = "TrunkV2"
	TrunkV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrunkV2_Kind}.String()
	TrunkV2_KindAPIVersion   = TrunkV2_Kind + "." + CRDGroupVersion.String()
	TrunkV2_GroupVersionKind = CRDGroupVersion.WithKind(TrunkV2_Kind)
)

func init() {
	SchemeBuilder.Register(&TrunkV2{}, &TrunkV2List{})
}
