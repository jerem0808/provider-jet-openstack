/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QosDscpMarkingRuleV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QosDscpMarkingRuleV2Parameters struct {

	// +kubebuilder:validation:Required
	DscpMark *float64 `json:"dscpMark" tf:"dscp_mark,omitempty"`

	// +kubebuilder:validation:Required
	QosPolicyID *string `json:"qosPolicyId" tf:"qos_policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// QosDscpMarkingRuleV2Spec defines the desired state of QosDscpMarkingRuleV2
type QosDscpMarkingRuleV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QosDscpMarkingRuleV2Parameters `json:"forProvider"`
}

// QosDscpMarkingRuleV2Status defines the observed state of QosDscpMarkingRuleV2.
type QosDscpMarkingRuleV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QosDscpMarkingRuleV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QosDscpMarkingRuleV2 is the Schema for the QosDscpMarkingRuleV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type QosDscpMarkingRuleV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QosDscpMarkingRuleV2Spec   `json:"spec"`
	Status            QosDscpMarkingRuleV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QosDscpMarkingRuleV2List contains a list of QosDscpMarkingRuleV2s
type QosDscpMarkingRuleV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QosDscpMarkingRuleV2 `json:"items"`
}

// Repository type metadata.
var (
	QosDscpMarkingRuleV2_Kind             = "QosDscpMarkingRuleV2"
	QosDscpMarkingRuleV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QosDscpMarkingRuleV2_Kind}.String()
	QosDscpMarkingRuleV2_KindAPIVersion   = QosDscpMarkingRuleV2_Kind + "." + CRDGroupVersion.String()
	QosDscpMarkingRuleV2_GroupVersionKind = CRDGroupVersion.WithKind(QosDscpMarkingRuleV2_Kind)
)

func init() {
	SchemeBuilder.Register(&QosDscpMarkingRuleV2{}, &QosDscpMarkingRuleV2List{})
}
