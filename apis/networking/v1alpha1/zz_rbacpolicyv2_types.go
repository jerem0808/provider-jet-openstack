/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RbacPolicyV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type RbacPolicyV2Parameters struct {

	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Required
	ObjectID *string `json:"objectId" tf:"object_id,omitempty"`

	// +kubebuilder:validation:Required
	ObjectType *string `json:"objectType" tf:"object_type,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	TargetTenant *string `json:"targetTenant" tf:"target_tenant,omitempty"`
}

// RbacPolicyV2Spec defines the desired state of RbacPolicyV2
type RbacPolicyV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RbacPolicyV2Parameters `json:"forProvider"`
}

// RbacPolicyV2Status defines the observed state of RbacPolicyV2.
type RbacPolicyV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RbacPolicyV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RbacPolicyV2 is the Schema for the RbacPolicyV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type RbacPolicyV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RbacPolicyV2Spec   `json:"spec"`
	Status            RbacPolicyV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RbacPolicyV2List contains a list of RbacPolicyV2s
type RbacPolicyV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RbacPolicyV2 `json:"items"`
}

// Repository type metadata.
var (
	RbacPolicyV2_Kind             = "RbacPolicyV2"
	RbacPolicyV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RbacPolicyV2_Kind}.String()
	RbacPolicyV2_KindAPIVersion   = RbacPolicyV2_Kind + "." + CRDGroupVersion.String()
	RbacPolicyV2_GroupVersionKind = CRDGroupVersion.WithKind(RbacPolicyV2_Kind)
)

func init() {
	SchemeBuilder.Register(&RbacPolicyV2{}, &RbacPolicyV2List{})
}
