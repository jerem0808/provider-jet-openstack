/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SubnetRouteV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SubnetRouteV2Parameters struct {

	// +kubebuilder:validation:Required
	DestinationCidr *string `json:"destinationCidr" tf:"destination_cidr,omitempty"`

	// +kubebuilder:validation:Required
	NextHop *string `json:"nextHop" tf:"next_hop,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

// SubnetRouteV2Spec defines the desired state of SubnetRouteV2
type SubnetRouteV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubnetRouteV2Parameters `json:"forProvider"`
}

// SubnetRouteV2Status defines the observed state of SubnetRouteV2.
type SubnetRouteV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubnetRouteV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetRouteV2 is the Schema for the SubnetRouteV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type SubnetRouteV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubnetRouteV2Spec   `json:"spec"`
	Status            SubnetRouteV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetRouteV2List contains a list of SubnetRouteV2s
type SubnetRouteV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubnetRouteV2 `json:"items"`
}

// Repository type metadata.
var (
	SubnetRouteV2_Kind             = "SubnetRouteV2"
	SubnetRouteV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubnetRouteV2_Kind}.String()
	SubnetRouteV2_KindAPIVersion   = SubnetRouteV2_Kind + "." + CRDGroupVersion.String()
	SubnetRouteV2_GroupVersionKind = CRDGroupVersion.WithKind(SubnetRouteV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SubnetRouteV2{}, &SubnetRouteV2List{})
}
