/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type OutputsObservation struct {
}

type OutputsParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	OutputKey *string `json:"outputKey" tf:"output_key,omitempty"`

	// +kubebuilder:validation:Required
	OutputValue *string `json:"outputValue" tf:"output_value,omitempty"`
}

type StackV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type StackV1Parameters struct {

	// +kubebuilder:validation:Optional
	Capabilities []*string `json:"capabilities,omitempty" tf:"capabilities,omitempty"`

	// +kubebuilder:validation:Optional
	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisableRollback *bool `json:"disableRollback,omitempty" tf:"disable_rollback,omitempty"`

	// +kubebuilder:validation:Optional
	EnvironmentOpts map[string]*string `json:"environmentOpts,omitempty" tf:"environment_opts,omitempty"`

	// +kubebuilder:validation:Optional
	NotificationTopics []*string `json:"notificationTopics,omitempty" tf:"notification_topics,omitempty"`

	// +kubebuilder:validation:Optional
	Outputs []OutputsParameters `json:"outputs,omitempty" tf:"outputs,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	StatusReason *string `json:"statusReason,omitempty" tf:"status_reason,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TemplateDescription *string `json:"templateDescription,omitempty" tf:"template_description,omitempty"`

	// +kubebuilder:validation:Required
	TemplateOpts map[string]*string `json:"templateOpts" tf:"template_opts,omitempty"`

	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// +kubebuilder:validation:Optional
	UpdatedTime *string `json:"updatedTime,omitempty" tf:"updated_time,omitempty"`
}

// StackV1Spec defines the desired state of StackV1
type StackV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StackV1Parameters `json:"forProvider"`
}

// StackV1Status defines the observed state of StackV1.
type StackV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StackV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StackV1 is the Schema for the StackV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type StackV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StackV1Spec   `json:"spec"`
	Status            StackV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StackV1List contains a list of StackV1s
type StackV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StackV1 `json:"items"`
}

// Repository type metadata.
var (
	StackV1_Kind             = "StackV1"
	StackV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StackV1_Kind}.String()
	StackV1_KindAPIVersion   = StackV1_Kind + "." + CRDGroupVersion.String()
	StackV1_GroupVersionKind = CRDGroupVersion.WithKind(StackV1_Kind)
)

func init() {
	SchemeBuilder.Register(&StackV1{}, &StackV1List{})
}
