/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FlavorV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FlavorV2Parameters struct {

	// +kubebuilder:validation:Required
	Disk *float64 `json:"disk" tf:"disk,omitempty"`

	// +kubebuilder:validation:Optional
	Ephemeral *float64 `json:"ephemeral,omitempty" tf:"ephemeral,omitempty"`

	// +kubebuilder:validation:Optional
	ExtraSpecs map[string]*string `json:"extraSpecs,omitempty" tf:"extra_specs,omitempty"`

	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// +kubebuilder:validation:Required
	RAM *float64 `json:"ram" tf:"ram,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	RxTxFactor *float64 `json:"rxTxFactor,omitempty" tf:"rx_tx_factor,omitempty"`

	// +kubebuilder:validation:Optional
	Swap *float64 `json:"swap,omitempty" tf:"swap,omitempty"`

	// +kubebuilder:validation:Required
	Vcpus *float64 `json:"vcpus" tf:"vcpus,omitempty"`
}

// FlavorV2Spec defines the desired state of FlavorV2
type FlavorV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FlavorV2Parameters `json:"forProvider"`
}

// FlavorV2Status defines the observed state of FlavorV2.
type FlavorV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FlavorV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FlavorV2 is the Schema for the FlavorV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type FlavorV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FlavorV2Spec   `json:"spec"`
	Status            FlavorV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FlavorV2List contains a list of FlavorV2s
type FlavorV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FlavorV2 `json:"items"`
}

// Repository type metadata.
var (
	FlavorV2_Kind             = "FlavorV2"
	FlavorV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FlavorV2_Kind}.String()
	FlavorV2_KindAPIVersion   = FlavorV2_Kind + "." + CRDGroupVersion.String()
	FlavorV2_GroupVersionKind = CRDGroupVersion.WithKind(FlavorV2_Kind)
)

func init() {
	SchemeBuilder.Register(&FlavorV2{}, &FlavorV2List{})
}
