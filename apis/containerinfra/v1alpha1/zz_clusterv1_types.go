/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterV1Observation struct {
	APIAddress *string `json:"apiAddress,omitempty" tf:"api_address,omitempty"`

	CoeVersion *string `json:"coeVersion,omitempty" tf:"coe_version,omitempty"`

	ContainerVersion *string `json:"containerVersion,omitempty" tf:"container_version,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MasterAddresses []*string `json:"masterAddresses,omitempty" tf:"master_addresses,omitempty"`

	NodeAddresses []*string `json:"nodeAddresses,omitempty" tf:"node_addresses,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	StackID *string `json:"stackId,omitempty" tf:"stack_id,omitempty"`

	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type ClusterV1Parameters struct {

	// +kubebuilder:validation:Required
	ClusterTemplateID *string `json:"clusterTemplateId" tf:"cluster_template_id,omitempty"`

	// +kubebuilder:validation:Optional
	CreateTimeout *float64 `json:"createTimeout,omitempty" tf:"create_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	DiscoveryURL *string `json:"discoveryUrl,omitempty" tf:"discovery_url,omitempty"`

	// +kubebuilder:validation:Optional
	DockerVolumeSize *float64 `json:"dockerVolumeSize,omitempty" tf:"docker_volume_size,omitempty"`

	// +kubebuilder:validation:Optional
	FixedNetwork *string `json:"fixedNetwork,omitempty" tf:"fixed_network,omitempty"`

	// +kubebuilder:validation:Optional
	FixedSubnet *string `json:"fixedSubnet,omitempty" tf:"fixed_subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Flavor *string `json:"flavor,omitempty" tf:"flavor,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingIPEnabled *bool `json:"floatingIpEnabled,omitempty" tf:"floating_ip_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Keypair *string `json:"keypair,omitempty" tf:"keypair,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	MasterCount *float64 `json:"masterCount,omitempty" tf:"master_count,omitempty"`

	// +kubebuilder:validation:Optional
	MasterFlavor *string `json:"masterFlavor,omitempty" tf:"master_flavor,omitempty"`

	// +kubebuilder:validation:Optional
	MergeLabels *bool `json:"mergeLabels,omitempty" tf:"merge_labels,omitempty"`

	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// ClusterV1Spec defines the desired state of ClusterV1
type ClusterV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterV1Parameters `json:"forProvider"`
}

// ClusterV1Status defines the observed state of ClusterV1.
type ClusterV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV1 is the Schema for the ClusterV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type ClusterV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterV1Spec   `json:"spec"`
	Status            ClusterV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterV1List contains a list of ClusterV1s
type ClusterV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterV1 `json:"items"`
}

// Repository type metadata.
var (
	ClusterV1_Kind             = "ClusterV1"
	ClusterV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterV1_Kind}.String()
	ClusterV1_KindAPIVersion   = ClusterV1_Kind + "." + CRDGroupVersion.String()
	ClusterV1_GroupVersionKind = CRDGroupVersion.WithKind(ClusterV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterV1{}, &ClusterV1List{})
}
