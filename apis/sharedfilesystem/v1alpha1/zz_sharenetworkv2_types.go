/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SharenetworkV2Observation struct {
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPVersion *float64 `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	SegmentationID *float64 `json:"segmentationId,omitempty" tf:"segmentation_id,omitempty"`
}

type SharenetworkV2Parameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	NeutronNetID *string `json:"neutronNetId" tf:"neutron_net_id,omitempty"`

	// +kubebuilder:validation:Required
	NeutronSubnetID *string `json:"neutronSubnetId" tf:"neutron_subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityServiceIds []*string `json:"securityServiceIds,omitempty" tf:"security_service_ids,omitempty"`
}

// SharenetworkV2Spec defines the desired state of SharenetworkV2
type SharenetworkV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SharenetworkV2Parameters `json:"forProvider"`
}

// SharenetworkV2Status defines the observed state of SharenetworkV2.
type SharenetworkV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SharenetworkV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SharenetworkV2 is the Schema for the SharenetworkV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type SharenetworkV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SharenetworkV2Spec   `json:"spec"`
	Status            SharenetworkV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SharenetworkV2List contains a list of SharenetworkV2s
type SharenetworkV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SharenetworkV2 `json:"items"`
}

// Repository type metadata.
var (
	SharenetworkV2_Kind             = "SharenetworkV2"
	SharenetworkV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SharenetworkV2_Kind}.String()
	SharenetworkV2_KindAPIVersion   = SharenetworkV2_Kind + "." + CRDGroupVersion.String()
	SharenetworkV2_GroupVersionKind = CRDGroupVersion.WithKind(SharenetworkV2_Kind)
)

func init() {
	SchemeBuilder.Register(&SharenetworkV2{}, &SharenetworkV2List{})
}
