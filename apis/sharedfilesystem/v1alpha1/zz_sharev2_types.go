/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExportLocationsObservation struct {
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	Preferred *string `json:"preferred,omitempty" tf:"preferred,omitempty"`
}

type ExportLocationsParameters struct {
}

type ShareV2Observation struct {
	AllMetadata map[string]*string `json:"allMetadata,omitempty" tf:"all_metadata,omitempty"`

	ExportLocations []ExportLocationsObservation `json:"exportLocations,omitempty" tf:"export_locations,omitempty"`

	HasReplicas *bool `json:"hasReplicas,omitempty" tf:"has_replicas,omitempty"`

	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	ReplicationType *string `json:"replicationType,omitempty" tf:"replication_type,omitempty"`

	ShareServerID *string `json:"shareServerId,omitempty" tf:"share_server_id,omitempty"`
}

type ShareV2Parameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	ShareNetworkID *string `json:"shareNetworkId,omitempty" tf:"share_network_id,omitempty"`

	// +kubebuilder:validation:Required
	ShareProto *string `json:"shareProto" tf:"share_proto,omitempty"`

	// +kubebuilder:validation:Optional
	ShareType *string `json:"shareType,omitempty" tf:"share_type,omitempty"`

	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`
}

// ShareV2Spec defines the desired state of ShareV2
type ShareV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShareV2Parameters `json:"forProvider"`
}

// ShareV2Status defines the observed state of ShareV2.
type ShareV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShareV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ShareV2 is the Schema for the ShareV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type ShareV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShareV2Spec   `json:"spec"`
	Status            ShareV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShareV2List contains a list of ShareV2s
type ShareV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShareV2 `json:"items"`
}

// Repository type metadata.
var (
	ShareV2_Kind             = "ShareV2"
	ShareV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShareV2_Kind}.String()
	ShareV2_KindAPIVersion   = ShareV2_Kind + "." + CRDGroupVersion.String()
	ShareV2_GroupVersionKind = CRDGroupVersion.WithKind(ShareV2_Kind)
)

func init() {
	SchemeBuilder.Register(&ShareV2{}, &ShareV2List{})
}
