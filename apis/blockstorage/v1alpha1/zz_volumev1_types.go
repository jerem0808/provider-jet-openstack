/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttachmentObservation struct {
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`
}

type AttachmentParameters struct {
}

type VolumeV1Observation struct {
	Attachment []AttachmentObservation `json:"attachment,omitempty" tf:"attachment,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VolumeV1Parameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Optional
	SnapshotID *string `json:"snapshotId,omitempty" tf:"snapshot_id,omitempty"`

	// +kubebuilder:validation:Optional
	SourceVolID *string `json:"sourceVolId,omitempty" tf:"source_vol_id,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

// VolumeV1Spec defines the desired state of VolumeV1
type VolumeV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeV1Parameters `json:"forProvider"`
}

// VolumeV1Status defines the observed state of VolumeV1.
type VolumeV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeV1 is the Schema for the VolumeV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type VolumeV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeV1Spec   `json:"spec"`
	Status            VolumeV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeV1List contains a list of VolumeV1s
type VolumeV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeV1 `json:"items"`
}

// Repository type metadata.
var (
	VolumeV1_Kind             = "VolumeV1"
	VolumeV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeV1_Kind}.String()
	VolumeV1_KindAPIVersion   = VolumeV1_Kind + "." + CRDGroupVersion.String()
	VolumeV1_GroupVersionKind = CRDGroupVersion.WithKind(VolumeV1_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeV1{}, &VolumeV1List{})
}
