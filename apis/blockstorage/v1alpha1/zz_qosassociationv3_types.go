/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QosAssociationV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QosAssociationV3Parameters struct {

	// +kubebuilder:validation:Required
	QosID *string `json:"qosId" tf:"qos_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	VolumeTypeID *string `json:"volumeTypeId" tf:"volume_type_id,omitempty"`
}

// QosAssociationV3Spec defines the desired state of QosAssociationV3
type QosAssociationV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QosAssociationV3Parameters `json:"forProvider"`
}

// QosAssociationV3Status defines the observed state of QosAssociationV3.
type QosAssociationV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QosAssociationV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QosAssociationV3 is the Schema for the QosAssociationV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type QosAssociationV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QosAssociationV3Spec   `json:"spec"`
	Status            QosAssociationV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QosAssociationV3List contains a list of QosAssociationV3s
type QosAssociationV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QosAssociationV3 `json:"items"`
}

// Repository type metadata.
var (
	QosAssociationV3_Kind             = "QosAssociationV3"
	QosAssociationV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QosAssociationV3_Kind}.String()
	QosAssociationV3_KindAPIVersion   = QosAssociationV3_Kind + "." + CRDGroupVersion.String()
	QosAssociationV3_GroupVersionKind = CRDGroupVersion.WithKind(QosAssociationV3_Kind)
)

func init() {
	SchemeBuilder.Register(&QosAssociationV3{}, &QosAssociationV3List{})
}
