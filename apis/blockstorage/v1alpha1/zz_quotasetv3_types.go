/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QuotasetV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type QuotasetV3Parameters struct {

	// +kubebuilder:validation:Optional
	BackupGigabytes *float64 `json:"backupGigabytes,omitempty" tf:"backup_gigabytes,omitempty"`

	// +kubebuilder:validation:Optional
	Backups *float64 `json:"backups,omitempty" tf:"backups,omitempty"`

	// +kubebuilder:validation:Optional
	Gigabytes *float64 `json:"gigabytes,omitempty" tf:"gigabytes,omitempty"`

	// +kubebuilder:validation:Optional
	Groups *float64 `json:"groups,omitempty" tf:"groups,omitempty"`

	// +kubebuilder:validation:Optional
	PerVolumeGigabytes *float64 `json:"perVolumeGigabytes,omitempty" tf:"per_volume_gigabytes,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Snapshots *float64 `json:"snapshots,omitempty" tf:"snapshots,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeTypeQuota map[string]*string `json:"volumeTypeQuota,omitempty" tf:"volume_type_quota,omitempty"`

	// +kubebuilder:validation:Optional
	Volumes *float64 `json:"volumes,omitempty" tf:"volumes,omitempty"`
}

// QuotasetV3Spec defines the desired state of QuotasetV3
type QuotasetV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QuotasetV3Parameters `json:"forProvider"`
}

// QuotasetV3Status defines the observed state of QuotasetV3.
type QuotasetV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QuotasetV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// QuotasetV3 is the Schema for the QuotasetV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type QuotasetV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              QuotasetV3Spec   `json:"spec"`
	Status            QuotasetV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QuotasetV3List contains a list of QuotasetV3s
type QuotasetV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []QuotasetV3 `json:"items"`
}

// Repository type metadata.
var (
	QuotasetV3_Kind             = "QuotasetV3"
	QuotasetV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: QuotasetV3_Kind}.String()
	QuotasetV3_KindAPIVersion   = QuotasetV3_Kind + "." + CRDGroupVersion.String()
	QuotasetV3_GroupVersionKind = CRDGroupVersion.WithKind(QuotasetV3_Kind)
)

func init() {
	SchemeBuilder.Register(&QuotasetV3{}, &QuotasetV3List{})
}
