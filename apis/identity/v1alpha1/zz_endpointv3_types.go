/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`
}

type EndpointV3Parameters struct {

	// +kubebuilder:validation:Required
	EndpointRegion *string `json:"endpointRegion" tf:"endpoint_region,omitempty"`

	// +kubebuilder:validation:Optional
	Interface *string `json:"interface,omitempty" tf:"interface,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	ServiceID *string `json:"serviceId" tf:"service_id,omitempty"`

	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

// EndpointV3Spec defines the desired state of EndpointV3
type EndpointV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointV3Parameters `json:"forProvider"`
}

// EndpointV3Status defines the observed state of EndpointV3.
type EndpointV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointV3 is the Schema for the EndpointV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type EndpointV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointV3Spec   `json:"spec"`
	Status            EndpointV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointV3List contains a list of EndpointV3s
type EndpointV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointV3 `json:"items"`
}

// Repository type metadata.
var (
	EndpointV3_Kind             = "EndpointV3"
	EndpointV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointV3_Kind}.String()
	EndpointV3_KindAPIVersion   = EndpointV3_Kind + "." + CRDGroupVersion.String()
	EndpointV3_GroupVersionKind = CRDGroupVersion.WithKind(EndpointV3_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointV3{}, &EndpointV3List{})
}
