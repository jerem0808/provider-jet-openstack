/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserMembershipV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type UserMembershipV3Parameters struct {

	// +kubebuilder:validation:Required
	GroupID *string `json:"groupId" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	UserID *string `json:"userId" tf:"user_id,omitempty"`
}

// UserMembershipV3Spec defines the desired state of UserMembershipV3
type UserMembershipV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserMembershipV3Parameters `json:"forProvider"`
}

// UserMembershipV3Status defines the observed state of UserMembershipV3.
type UserMembershipV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserMembershipV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserMembershipV3 is the Schema for the UserMembershipV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type UserMembershipV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserMembershipV3Spec   `json:"spec"`
	Status            UserMembershipV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserMembershipV3List contains a list of UserMembershipV3s
type UserMembershipV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserMembershipV3 `json:"items"`
}

// Repository type metadata.
var (
	UserMembershipV3_Kind             = "UserMembershipV3"
	UserMembershipV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserMembershipV3_Kind}.String()
	UserMembershipV3_KindAPIVersion   = UserMembershipV3_Kind + "." + CRDGroupVersion.String()
	UserMembershipV3_GroupVersionKind = CRDGroupVersion.WithKind(UserMembershipV3_Kind)
)

func init() {
	SchemeBuilder.Register(&UserMembershipV3{}, &UserMembershipV3List{})
}
