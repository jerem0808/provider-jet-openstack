/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceV3Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceV3Parameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// ServiceV3Spec defines the desired state of ServiceV3
type ServiceV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceV3Parameters `json:"forProvider"`
}

// ServiceV3Status defines the observed state of ServiceV3.
type ServiceV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceV3 is the Schema for the ServiceV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type ServiceV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceV3Spec   `json:"spec"`
	Status            ServiceV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceV3List contains a list of ServiceV3s
type ServiceV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceV3 `json:"items"`
}

// Repository type metadata.
var (
	ServiceV3_Kind             = "ServiceV3"
	ServiceV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceV3_Kind}.String()
	ServiceV3_KindAPIVersion   = ServiceV3_Kind + "." + CRDGroupVersion.String()
	ServiceV3_GroupVersionKind = CRDGroupVersion.WithKind(ServiceV3_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceV3{}, &ServiceV3List{})
}
