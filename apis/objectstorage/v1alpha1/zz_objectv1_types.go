/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObjectV1Observation struct {
	ContentLength *float64 `json:"contentLength,omitempty" tf:"content_length,omitempty"`

	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastModified *string `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	TransID *string `json:"transId,omitempty" tf:"trans_id,omitempty"`
}

type ObjectV1Parameters struct {

	// +kubebuilder:validation:Required
	ContainerName *string `json:"containerName" tf:"container_name,omitempty"`

	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// +kubebuilder:validation:Optional
	ContentDisposition *string `json:"contentDisposition,omitempty" tf:"content_disposition,omitempty"`

	// +kubebuilder:validation:Optional
	ContentEncoding *string `json:"contentEncoding,omitempty" tf:"content_encoding,omitempty"`

	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// +kubebuilder:validation:Optional
	CopyFrom *string `json:"copyFrom,omitempty" tf:"copy_from,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteAfter *float64 `json:"deleteAfter,omitempty" tf:"delete_after,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteAt *string `json:"deleteAt,omitempty" tf:"delete_at,omitempty"`

	// +kubebuilder:validation:Optional
	DetectContentType *bool `json:"detectContentType,omitempty" tf:"detect_content_type,omitempty"`

	// +kubebuilder:validation:Optional
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata map[string]*string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	ObjectManifest *string `json:"objectManifest,omitempty" tf:"object_manifest,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

// ObjectV1Spec defines the desired state of ObjectV1
type ObjectV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ObjectV1Parameters `json:"forProvider"`
}

// ObjectV1Status defines the observed state of ObjectV1.
type ObjectV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ObjectV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ObjectV1 is the Schema for the ObjectV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type ObjectV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ObjectV1Spec   `json:"spec"`
	Status            ObjectV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ObjectV1List contains a list of ObjectV1s
type ObjectV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ObjectV1 `json:"items"`
}

// Repository type metadata.
var (
	ObjectV1_Kind             = "ObjectV1"
	ObjectV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ObjectV1_Kind}.String()
	ObjectV1_KindAPIVersion   = ObjectV1_Kind + "." + CRDGroupVersion.String()
	ObjectV1_GroupVersionKind = CRDGroupVersion.WithKind(ObjectV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ObjectV1{}, &ObjectV1List{})
}
