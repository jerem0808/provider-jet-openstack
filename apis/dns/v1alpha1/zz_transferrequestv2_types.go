/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TransferRequestV2Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TransferRequestV2Parameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisableStatusCheck *bool `json:"disableStatusCheck,omitempty" tf:"disable_status_check,omitempty"`

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	TargetProjectID *string `json:"targetProjectId,omitempty" tf:"target_project_id,omitempty"`

	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// +kubebuilder:validation:Required
	ZoneID *string `json:"zoneId" tf:"zone_id,omitempty"`
}

// TransferRequestV2Spec defines the desired state of TransferRequestV2
type TransferRequestV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransferRequestV2Parameters `json:"forProvider"`
}

// TransferRequestV2Status defines the observed state of TransferRequestV2.
type TransferRequestV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransferRequestV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransferRequestV2 is the Schema for the TransferRequestV2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type TransferRequestV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransferRequestV2Spec   `json:"spec"`
	Status            TransferRequestV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransferRequestV2List contains a list of TransferRequestV2s
type TransferRequestV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransferRequestV2 `json:"items"`
}

// Repository type metadata.
var (
	TransferRequestV2_Kind             = "TransferRequestV2"
	TransferRequestV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransferRequestV2_Kind}.String()
	TransferRequestV2_KindAPIVersion   = TransferRequestV2_Kind + "." + CRDGroupVersion.String()
	TransferRequestV2_GroupVersionKind = CRDGroupVersion.WithKind(TransferRequestV2_Kind)
)

func init() {
	SchemeBuilder.Register(&TransferRequestV2{}, &TransferRequestV2List{})
}
