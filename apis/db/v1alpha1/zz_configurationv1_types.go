/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationObservation struct {
}

type ConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type ConfigurationV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConfigurationV1Parameters struct {

	// +kubebuilder:validation:Optional
	Configuration []ConfigurationParameters `json:"configuration,omitempty" tf:"configuration,omitempty"`

	// +kubebuilder:validation:Required
	Datastore []DatastoreParameters `json:"datastore" tf:"datastore,omitempty"`

	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type DatastoreObservation struct {
}

type DatastoreParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`
}

// ConfigurationV1Spec defines the desired state of ConfigurationV1
type ConfigurationV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationV1Parameters `json:"forProvider"`
}

// ConfigurationV1Status defines the observed state of ConfigurationV1.
type ConfigurationV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationV1 is the Schema for the ConfigurationV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type ConfigurationV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationV1Spec   `json:"spec"`
	Status            ConfigurationV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationV1List contains a list of ConfigurationV1s
type ConfigurationV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationV1 `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationV1_Kind             = "ConfigurationV1"
	ConfigurationV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigurationV1_Kind}.String()
	ConfigurationV1_KindAPIVersion   = ConfigurationV1_Kind + "." + CRDGroupVersion.String()
	ConfigurationV1_GroupVersionKind = CRDGroupVersion.WithKind(ConfigurationV1_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationV1{}, &ConfigurationV1List{})
}
