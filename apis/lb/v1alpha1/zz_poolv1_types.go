/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PoolV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PoolV1Parameters struct {

	// +kubebuilder:validation:Required
	LBMethod *string `json:"lbMethod" tf:"lb_method,omitempty"`

	// +kubebuilder:validation:Optional
	LBProvider *string `json:"lbProvider,omitempty" tf:"lb_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Member []*string `json:"member,omitempty" tf:"member,omitempty"`

	// +kubebuilder:validation:Optional
	MonitorIds []*string `json:"monitorIds,omitempty" tf:"monitor_ids,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// PoolV1Spec defines the desired state of PoolV1
type PoolV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PoolV1Parameters `json:"forProvider"`
}

// PoolV1Status defines the observed state of PoolV1.
type PoolV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PoolV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PoolV1 is the Schema for the PoolV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type PoolV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PoolV1Spec   `json:"spec"`
	Status            PoolV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PoolV1List contains a list of PoolV1s
type PoolV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PoolV1 `json:"items"`
}

// Repository type metadata.
var (
	PoolV1_Kind             = "PoolV1"
	PoolV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PoolV1_Kind}.String()
	PoolV1_KindAPIVersion   = PoolV1_Kind + "." + CRDGroupVersion.String()
	PoolV1_GroupVersionKind = CRDGroupVersion.WithKind(PoolV1_Kind)
)

func init() {
	SchemeBuilder.Register(&PoolV1{}, &PoolV1List{})
}
