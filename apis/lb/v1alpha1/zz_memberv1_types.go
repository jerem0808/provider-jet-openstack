/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MemberV1Observation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MemberV1Parameters struct {

	// +kubebuilder:validation:Required
	Address *string `json:"address" tf:"address,omitempty"`

	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// +kubebuilder:validation:Required
	PoolID *string `json:"poolId" tf:"pool_id,omitempty"`

	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// MemberV1Spec defines the desired state of MemberV1
type MemberV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MemberV1Parameters `json:"forProvider"`
}

// MemberV1Status defines the observed state of MemberV1.
type MemberV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MemberV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MemberV1 is the Schema for the MemberV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type MemberV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MemberV1Spec   `json:"spec"`
	Status            MemberV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MemberV1List contains a list of MemberV1s
type MemberV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MemberV1 `json:"items"`
}

// Repository type metadata.
var (
	MemberV1_Kind             = "MemberV1"
	MemberV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MemberV1_Kind}.String()
	MemberV1_KindAPIVersion   = MemberV1_Kind + "." + CRDGroupVersion.String()
	MemberV1_GroupVersionKind = CRDGroupVersion.WithKind(MemberV1_Kind)
)

func init() {
	SchemeBuilder.Register(&MemberV1{}, &MemberV1List{})
}
