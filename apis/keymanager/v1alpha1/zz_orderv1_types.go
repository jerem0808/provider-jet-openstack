/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MetaObservation struct {
}

type MetaParameters struct {

	// +kubebuilder:validation:Required
	Algorithm *string `json:"algorithm" tf:"algorithm,omitempty"`

	// +kubebuilder:validation:Required
	BitLength *float64 `json:"bitLength" tf:"bit_length,omitempty"`

	// +kubebuilder:validation:Optional
	Expiration *string `json:"expiration,omitempty" tf:"expiration,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PayloadContentType *string `json:"payloadContentType,omitempty" tf:"payload_content_type,omitempty"`
}

type OrderV1Observation struct {
	ContainerRef *string `json:"containerRef,omitempty" tf:"container_ref,omitempty"`

	Created *string `json:"created,omitempty" tf:"created,omitempty"`

	CreatorID *string `json:"creatorId,omitempty" tf:"creator_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	OrderRef *string `json:"orderRef,omitempty" tf:"order_ref,omitempty"`

	SecretRef *string `json:"secretRef,omitempty" tf:"secret_ref,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	SubStatus *string `json:"subStatus,omitempty" tf:"sub_status,omitempty"`

	SubStatusMessage *string `json:"subStatusMessage,omitempty" tf:"sub_status_message,omitempty"`

	Updated *string `json:"updated,omitempty" tf:"updated,omitempty"`
}

type OrderV1Parameters struct {

	// +kubebuilder:validation:Required
	Meta []MetaParameters `json:"meta" tf:"meta,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// OrderV1Spec defines the desired state of OrderV1
type OrderV1Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrderV1Parameters `json:"forProvider"`
}

// OrderV1Status defines the observed state of OrderV1.
type OrderV1Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrderV1Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrderV1 is the Schema for the OrderV1s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,openstackjet}
type OrderV1 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrderV1Spec   `json:"spec"`
	Status            OrderV1Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrderV1List contains a list of OrderV1s
type OrderV1List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrderV1 `json:"items"`
}

// Repository type metadata.
var (
	OrderV1_Kind             = "OrderV1"
	OrderV1_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrderV1_Kind}.String()
	OrderV1_KindAPIVersion   = OrderV1_Kind + "." + CRDGroupVersion.String()
	OrderV1_GroupVersionKind = CRDGroupVersion.WithKind(OrderV1_Kind)
)

func init() {
	SchemeBuilder.Register(&OrderV1{}, &OrderV1List{})
}
